[tool:pytest]
# Configuração pytest para TDD robusto - Libra Energia
# Inspirado nas práticas das Big Techs (Apple, Google, Meta)

# Diretórios de teste
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Marcadores personalizados
markers =
    unit: Testes unitários
    integration: Testes de integração
    e2e: Testes end-to-end
    performance: Testes de performance
    slow: Testes lentos
    api: Testes de API
    database: Testes de banco de dados
    frontend: Testes de frontend
    security: Testes de segurança
    regression: Testes de regressão

# Configurações de execução
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov=api
    --cov=database
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --junitxml=test-results.xml
    --html=test-report.html
    --self-contained-html

# Filtros de avisos
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*

# Configurações de timeout
timeout = 300
timeout_method = thread

# Configurações de paralelização
# -n auto (usar pytest-xdist se disponível)

# Configurações de logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configurações de fixtures
usefixtures = 
    clean_database
    mock_external_apis
